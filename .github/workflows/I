<!DOCTYPE html>
<html lang="no">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Kjøkkentopp Tegner</title>
    <link rel="manifest" href="manifest.json">
    <link rel="apple-touch-icon" href="icon-192.png">
    <meta name="theme-color" content="#ffffff">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/paper.js/0.12.17/paper-full.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto;
        }
        #canvas {
            width: 100vw;
            height: 100vh;
            touch-action: none;
        }
        #controls {
            position: fixed;
            top: 20px;
            left: 20px;
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }
        button {
            display: block;
            width: 200px;
            padding: 10px;
            margin: 5px 0;
            background: #007AFF;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
        }
        input {
            width: 190px;
            padding: 8px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 16px;
        }
        label {
            display: block;
            margin-top: 10px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div id="controls">
        <label for="width">Bredde (mm):</label>
        <input type="number" id="width" value="600">
        <label for="height">Høyde (mm):</label>
        <input type="number" id="height" value="600">
        <button id="addRect">Legg til rektangel</button>
        <button id="toggleSnap">Slå på snap</button>
        <button id="toggleMeasure">Vis mål</button>
    </div>
    <canvas id="canvas" resize></canvas>
    <script src="app.js"></script>
    <script>
        // Register Service Worker
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('service-worker.js')
                .then(registration => {
                    console.log('ServiceWorker registered');
                })
                .catch(error => {
                    console.log('ServiceWorker registration failed:', error);
                });
        }
    </script>
</body>
</html>
```

Next, create another file named "app.js":

1. Click "Add file" again
2. Choose "Create new file"
3. Name it "app.js"
4. Copy and paste this code:

```javascript
paper.install(window);
window.onload = function() {
    paper.setup('canvas');

    const config = {
        snapEnabled: false,
        measureEnabled: true,
        snapDistance: 20,
        scale: 1 // 1 pixel = 1mm
    };

    function createRectangle(width, height) {
        const rectangle = new Path.Rectangle({
            point: view.center.subtract(new Point(width/2, height/2)),
            size: new Size(width, height),
            strokeColor: 'black',
            fillColor: new Color(0, 0.5, 1, 0.5),
            strokeWidth: 2
        });

        // Add measurement labels
        const labels = new Group();
        
        // Width label
        const widthLabel = new PointText({
            point: rectangle.bounds.center.add(new Point(0, -height/2 - 20)),
            content: width + ' mm',
            justification: 'center',
            fillColor: 'black',
            fontSize: 14
        });
        
        // Height label
        const heightLabel = new PointText({
            point: rectangle.bounds.center.add(new Point(width/2 + 20, 0)),
            content: height + ' mm',
            justification: 'left',
            fillColor: 'black',
            fontSize: 14
        });

        labels.addChildren([widthLabel, heightLabel]);
        labels.visible = config.measureEnabled;

        // Make rectangle interactive
        rectangle.onMouseDrag = function(event) {
            this.position = this.position.add(event.delta);
            updateLabels();
            if (config.snapEnabled) checkSnap();
        };

        function updateLabels() {
            widthLabel.point = rectangle.bounds.center.add(new Point(0, -height/2 - 20));
            heightLabel.point = rectangle.bounds.center.add(new Point(width/2 + 20, 0));
        }

        function checkSnap() {
            // Add snapping logic here
        }

        return { rectangle, labels };
    }

    // UI Controls
    document.getElementById('addRect').onclick = function() {
        const width = Number(document.getElementById('width').value);
        const height = Number(document.getElementById('height').value);
        if (width > 0 && height > 0) {
            createRectangle(width, height);
        }
    };

    document.getElementById('toggleSnap').onclick = function() {
        config.snapEnabled = !config.snapEnabled;
        this.textContent = config.snapEnabled ? 'Slå av snap' : 'Slå på snap';
    };

    document.getElementById('toggleMeasure').onclick = function() {
        config.measureEnabled = !config.measureEnabled;
        this.textContent = config.measureEnabled ? 'Skjul mål' : 'Vis mål';
        project.activeLayer.children.forEach(child => {
            if (child instanceof Group) {
                child.visible = config.measureEnabled;
            }
        });
    };

    view.draw();
};
